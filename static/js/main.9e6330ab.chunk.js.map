{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","goon","id","alt","name","email","CardList","goons","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","monsters","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAGaA,G,MAAO,SAACC,GAAD,OAClB,sBAAKC,UAAU,iBAAf,UACE,qBAAKC,IAAG,+BAA0BF,EAAMG,KAAKC,GAArC,0BAAiEC,IAAI,SAC7E,6BAAKL,EAAMG,KAAKG,OAChB,4BAAIN,EAAMG,KAAKI,aCDNC,G,MAAW,SAAAR,GAAK,OAC3B,qBAAKC,UAAU,YAAf,SACGD,EAAMS,MAAMC,KAAI,SAAAP,GAAI,OACnB,cAAC,EAAD,CAAoBA,KAAMA,GAAfA,EAAKC,WCNTO,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACvB,uBACEZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC0CCG,G,wDA1Cf,aAAc,IAAD,8BAGX,gBAkBFH,aAAe,SAAAI,GACb,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAhBrC,EAAKC,MAAQ,CAIXC,SAAU,GACVJ,YAAa,IAXJ,E,gEAeQ,IAAD,OAClBK,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKV,SAAS,CAACK,SAAUK,S,+BAOnC,IAAD,EAC0BC,KAAKP,MAA9BC,EADD,EACCA,SAAUJ,EADX,EACWA,YACXW,EAAmBP,EAASQ,QAAO,SAAA5B,GAAI,OAC3CA,EAAKG,KAAK0B,cAAcC,SAASd,EAAYa,kBAE/C,OACE,sBAAK/B,UAAU,MAAf,UACE,+CACA,cAAC,EAAD,CACEW,YAAY,kBACZC,aAAcgB,KAAKhB,eAErB,cAAC,EAAD,CAAUJ,MAAOqB,W,GAtCLI,cCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.9e6330ab.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\nexport const Card = (props) =>(\r\n  <div className='card-container'>\r\n    <img src={`https://robohash.org/${props.goon.id}?set=set2&size=180x180`} alt=\"good\" />\r\n    <h2>{props.goon.name}</h2>\r\n    <p>{props.goon.email}</p>\r\n  </div>\r\n);\r\n","import React from 'react';\r\nimport {Card} from '../card/card.component.jsx';\r\nimport './card-list.styles.css';\r\n\r\n// functional component\r\n// parameter for functional component is props\r\nexport const CardList = props => (\r\n  <div className='card-list'>\r\n    {props.goons.map(goon => (\r\n      <Card key={goon.id} goon={goon}/>\r\n    ))}\r\n  </div>\r\n);\r\n","import React from 'react'\r\nimport './search-box.styles.css'\r\n\r\nexport const SearchBox = ({placeholder, handleChange})=>(\r\n  <input\r\n    className=\"search\"\r\n    type=\"search\"\r\n    placeholder={placeholder}\r\n    onChange={handleChange}\r\n    />\r\n);\r\n","import React, {Component} from 'react';\nimport {CardList} from './components/card-list/card-list.component'\nimport {SearchBox} from './components/search-box/search-box.component'\n// import {Card} from './components/card/card.component'\n// import logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\nconstructor(){\n  // super calls constructor method on Component class\n  // This then gives us access to this.state\n  super();\n  // state property now exists on the class App\n  //Better to use setState instead of mutating this.state\n  this.state = {\n    // can set a propert to the state object\n    // giving each value a key so react knows what element to update\n    // in case one of the values in the array changes\n    monsters: [],\n    searchField: ''\n  };\n}\n\ncomponentDidMount() {\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters: users}));\n}\n// same as handleChange = e => ({})\nhandleChange = e => {\n  this.setState({searchField: e.target.value})\n}\n\nrender(){\n  const {monsters, searchField} = this.state;\n  const filteredMonsters = monsters.filter(goon=>\n    goon.name.toLowerCase().includes(searchField.toLowerCase())\n  )\n  return(\n    <div className='App'>\n      <h1>Monster Cards</h1>\n      <SearchBox\n        placeholder=\"Search Monsters\"\n        handleChange={this.handleChange}\n        />\n      <CardList goons={filteredMonsters}/>\n      </div>\n    );\n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}